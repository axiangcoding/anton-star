consumes:
- application/json
definitions:
  app.ApiJson:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
  app.ErrJson:
    properties:
      err:
        items:
          type: string
        type: array
    type: object
  v1.LoginForm:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  v1.PostVisitForm:
    properties:
      client_id:
        description: 客户端生成id
        type: string
      page:
        description: 访问页面
        type: string
      user_id:
        description: 用户id
        type: integer
    type: object
  v1.RegisterForm:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
info:
  contact:
    email: axiangcoding@gmail.com
    name: axiangcoding
  description: An example of gin
  license: {}
  title: Golang Gin Template API
  version: 1.0.0
paths:
  /v1/captcha:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: 请求生成验证码
      tags:
      - Captcha
  /v1/captcha/{file}:
    get:
      consumes:
      - image/png
      parameters:
      - description: image file name
        in: path
        name: file
        required: true
        type: string
      - in: query
        name: lang
        type: string
      - in: query
        name: reload
        type: boolean
      responses:
        "200":
          description: ""
      summary: 获取验证码图片
      tags:
      - Captcha
  /v1/system/info:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      security:
      - ApiKeyAuth: []
      summary: System Info
      tags:
      - System
  /v1/user/key-field/exist:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrJson'
      summary: 判断主要的用户信息的值是否存在
      tags:
      - User
  /v1/user/login:
    post:
      parameters:
      - description: register form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/v1.LoginForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrJson'
      summary: User login
      tags:
      - User
  /v1/user/logout:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrJson'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - User
  /v1/user/register:
    post:
      parameters:
      - description: register form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/v1.RegisterForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.ErrJson'
      summary: 用户注册
      tags:
      - User
  /v1/visits:
    get:
      parameters:
      - description: query userinfo
        in: query
        name: form
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      security:
      - ApiKeyAuth: []
      tags:
      - Visit
  /v1/visits/count:
    get:
      parameters:
      - in: query
        name: timestamp
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      tags:
      - Visit
  /v1/visits/visit:
    post:
      parameters:
      - description: query userinfo
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/v1.PostVisitForm'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: 登记访问信息
      tags:
      - Visit
  /v1/war_thunder/userinfo:
    get:
      parameters:
      - in: query
        name: query_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: 获取异步查询结果
      tags:
      - WarThunder
  /v1/war_thunder/userinfo/queries:
    get:
      parameters:
      - description: 游戏的昵称
        in: query
        maxLength: 20
        name: nickname
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: 查询游戏昵称的所有query_id
      tags:
      - WarThunder
  /v1/war_thunder/userinfo/query/count:
    get:
      parameters:
      - in: query
        name: timestamp
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: 查询query的数量
      tags:
      - WarThunder
  /v1/war_thunder/userinfo/refresh:
    post:
      parameters:
      - description: 游戏的昵称
        in: query
        maxLength: 20
        name: nickname
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: 刷新一个游戏用户数据的最新数据
      tags:
      - WarThunder
produces:
- application/json
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
