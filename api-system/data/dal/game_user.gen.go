// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/axiangcoding/ax-web/data/table"
)

func newGameUser(db *gorm.DB, opts ...gen.DOOption) gameUser {
	_gameUser := gameUser{}

	_gameUser.gameUserDo.UseDB(db, opts...)
	_gameUser.gameUserDo.UseModel(&table.GameUser{})

	tableName := _gameUser.gameUserDo.TableName()
	_gameUser.ALL = field.NewAsterisk(tableName)
	_gameUser.ID = field.NewUint(tableName, "id")
	_gameUser.CreatedAt = field.NewTime(tableName, "created_at")
	_gameUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gameUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_gameUser.Nick = field.NewString(tableName, "nick")
	_gameUser.Clan = field.NewString(tableName, "clan")
	_gameUser.ClanUrl = field.NewString(tableName, "clan_url")
	_gameUser.Banned = field.NewBool(tableName, "banned")
	_gameUser.RegisterDate = field.NewTime(tableName, "register_date")
	_gameUser.Title = field.NewString(tableName, "title")
	_gameUser.Level = field.NewInt(tableName, "level")
	_gameUser.TotalMission = field.NewInt(tableName, "stat_sb_total_mission")
	_gameUser.WinRate = field.NewFloat64(tableName, "stat_sb_win_rate")
	_gameUser.GroundDestroyCount = field.NewInt(tableName, "rate_fleet_sb_ground_destroy_count")
	_gameUser.FleetDestroyCount = field.NewInt(tableName, "rate_fleet_sb_fleet_destroy_count")
	_gameUser.GameTime = field.NewString(tableName, "rate_fleet_sb_game_time")
	_gameUser.AviationDestroyCount = field.NewInt(tableName, "rate_fleet_sb_aviation_destroy_count")
	_gameUser.WinCount = field.NewInt(tableName, "stat_sb_win_count")
	_gameUser.SliverEagleEarned = field.NewInt64(tableName, "stat_sb_sliver_eagle_earned")
	_gameUser.DeadCount = field.NewInt(tableName, "stat_sb_dead_count")
	_gameUser.GameCount = field.NewInt(tableName, "rate_fleet_sb_game_count")
	_gameUser.GroundVehicleGameCount = field.NewInt(tableName, "rate_ground_sb_ground_vehicle_game_count")
	_gameUser.TDGameCount = field.NewInt(tableName, "rate_ground_sb_td_game_count")
	_gameUser.HTGameCount = field.NewInt(tableName, "rate_ground_sb_ht_game_count")
	_gameUser.SPAAGameCount = field.NewInt(tableName, "rate_ground_sb_spaa_game_count")
	_gameUser.GroundVehicleGameTime = field.NewString(tableName, "rate_ground_sb_ground_vehicle_game_time")
	_gameUser.TDGameTime = field.NewString(tableName, "rate_ground_sb_td_game_time")
	_gameUser.HTGameTime = field.NewString(tableName, "rate_ground_sb_ht_game_time")
	_gameUser.SPAAGameTime = field.NewString(tableName, "rate_ground_sb_spaa_game_time")
	_gameUser.TotalDestroyCount = field.NewInt(tableName, "rate_fleet_sb_total_destroy_count")
	_gameUser.FighterGameCount = field.NewInt(tableName, "rate_aviation_sb_fighter_game_count")
	_gameUser.BomberGameCount = field.NewInt(tableName, "rate_aviation_sb_bomber_game_count")
	_gameUser.AttackerGameCount = field.NewInt(tableName, "rate_aviation_sb_attacker_game_count")
	_gameUser.FighterGameTime = field.NewString(tableName, "rate_aviation_sb_fighter_game_time")
	_gameUser.BomberGameTime = field.NewString(tableName, "rate_aviation_sb_bomber_game_time")
	_gameUser.AttackerGameTime = field.NewString(tableName, "rate_aviation_sb_attacker_game_time")
	_gameUser.FleetGameCount = field.NewInt(tableName, "rate_fleet_sb_fleet_game_count")
	_gameUser.TorpedoBoatGameCount = field.NewInt(tableName, "rate_fleet_sb_torpedo_boat_game_count")
	_gameUser.GunboatGameCount = field.NewInt(tableName, "rate_fleet_sb_gunboat_game_count")
	_gameUser.TorpedoGunboatGameCount = field.NewInt(tableName, "rate_fleet_sb_torpedo_gunboat_game_count")
	_gameUser.SubmarineHuntGameCount = field.NewInt(tableName, "rate_fleet_sb_submarine_hunt_game_count")
	_gameUser.DestroyerGameCount = field.NewInt(tableName, "rate_fleet_sb_destroyer_game_count")
	_gameUser.NavyBargeGameCount = field.NewInt(tableName, "rate_fleet_sb_navy_barge_game_count")
	_gameUser.FleetGameTime = field.NewString(tableName, "rate_fleet_sb_fleet_game_time")
	_gameUser.TorpedoBoatGameTime = field.NewString(tableName, "rate_fleet_sb_torpedo_boat_game_time")
	_gameUser.GunboatGameTime = field.NewString(tableName, "rate_fleet_sb_gunboat_game_time")
	_gameUser.TorpedoGunboatGameTime = field.NewString(tableName, "rate_fleet_sb_torpedo_gunboat_game_time")
	_gameUser.SubmarineHuntGameTime = field.NewString(tableName, "rate_fleet_sb_submarine_hunt_game_time")
	_gameUser.DestroyerGameTime = field.NewString(tableName, "rate_fleet_sb_destroyer_game_time")
	_gameUser.NavyBargeGameTime = field.NewString(tableName, "rate_fleet_sb_navy_barge_game_time")
	_gameUser.TsABRate = field.NewFloat64(tableName, "ts_ab_rate")
	_gameUser.TsRBRate = field.NewFloat64(tableName, "ts_rb_rate")
	_gameUser.TsSBRate = field.NewFloat64(tableName, "ts_sb_rate")
	_gameUser.AsABRate = field.NewFloat64(tableName, "as_ab_rate")
	_gameUser.AsRBRate = field.NewFloat64(tableName, "as_rb_rate")
	_gameUser.AsSBRate = field.NewFloat64(tableName, "as_sb_rate")

	_gameUser.fillFieldMap()

	return _gameUser
}

type gameUser struct {
	gameUserDo

	ALL                     field.Asterisk
	ID                      field.Uint
	CreatedAt               field.Time
	UpdatedAt               field.Time
	DeletedAt               field.Field
	Nick                    field.String
	Clan                    field.String
	ClanUrl                 field.String
	Banned                  field.Bool
	RegisterDate            field.Time
	Title                   field.String
	Level                   field.Int
	TotalMission            field.Int
	WinRate                 field.Float64
	GroundDestroyCount      field.Int
	FleetDestroyCount       field.Int
	GameTime                field.String
	AviationDestroyCount    field.Int
	WinCount                field.Int
	SliverEagleEarned       field.Int64
	DeadCount               field.Int
	GameCount               field.Int
	GroundVehicleGameCount  field.Int
	TDGameCount             field.Int
	HTGameCount             field.Int
	SPAAGameCount           field.Int
	GroundVehicleGameTime   field.String
	TDGameTime              field.String
	HTGameTime              field.String
	SPAAGameTime            field.String
	TotalDestroyCount       field.Int
	FighterGameCount        field.Int
	BomberGameCount         field.Int
	AttackerGameCount       field.Int
	FighterGameTime         field.String
	BomberGameTime          field.String
	AttackerGameTime        field.String
	FleetGameCount          field.Int
	TorpedoBoatGameCount    field.Int
	GunboatGameCount        field.Int
	TorpedoGunboatGameCount field.Int
	SubmarineHuntGameCount  field.Int
	DestroyerGameCount      field.Int
	NavyBargeGameCount      field.Int
	FleetGameTime           field.String
	TorpedoBoatGameTime     field.String
	GunboatGameTime         field.String
	TorpedoGunboatGameTime  field.String
	SubmarineHuntGameTime   field.String
	DestroyerGameTime       field.String
	NavyBargeGameTime       field.String
	TsABRate                field.Float64
	TsRBRate                field.Float64
	TsSBRate                field.Float64
	AsABRate                field.Float64
	AsRBRate                field.Float64
	AsSBRate                field.Float64

	fieldMap map[string]field.Expr
}

func (g gameUser) Table(newTableName string) *gameUser {
	g.gameUserDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameUser) As(alias string) *gameUser {
	g.gameUserDo.DO = *(g.gameUserDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameUser) updateTableName(table string) *gameUser {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.Nick = field.NewString(table, "nick")
	g.Clan = field.NewString(table, "clan")
	g.ClanUrl = field.NewString(table, "clan_url")
	g.Banned = field.NewBool(table, "banned")
	g.RegisterDate = field.NewTime(table, "register_date")
	g.Title = field.NewString(table, "title")
	g.Level = field.NewInt(table, "level")
	g.TotalMission = field.NewInt(table, "stat_sb_total_mission")
	g.WinRate = field.NewFloat64(table, "stat_sb_win_rate")
	g.GroundDestroyCount = field.NewInt(table, "rate_fleet_sb_ground_destroy_count")
	g.FleetDestroyCount = field.NewInt(table, "rate_fleet_sb_fleet_destroy_count")
	g.GameTime = field.NewString(table, "rate_fleet_sb_game_time")
	g.AviationDestroyCount = field.NewInt(table, "rate_fleet_sb_aviation_destroy_count")
	g.WinCount = field.NewInt(table, "stat_sb_win_count")
	g.SliverEagleEarned = field.NewInt64(table, "stat_sb_sliver_eagle_earned")
	g.DeadCount = field.NewInt(table, "stat_sb_dead_count")
	g.GameCount = field.NewInt(table, "rate_fleet_sb_game_count")
	g.GroundVehicleGameCount = field.NewInt(table, "rate_ground_sb_ground_vehicle_game_count")
	g.TDGameCount = field.NewInt(table, "rate_ground_sb_td_game_count")
	g.HTGameCount = field.NewInt(table, "rate_ground_sb_ht_game_count")
	g.SPAAGameCount = field.NewInt(table, "rate_ground_sb_spaa_game_count")
	g.GroundVehicleGameTime = field.NewString(table, "rate_ground_sb_ground_vehicle_game_time")
	g.TDGameTime = field.NewString(table, "rate_ground_sb_td_game_time")
	g.HTGameTime = field.NewString(table, "rate_ground_sb_ht_game_time")
	g.SPAAGameTime = field.NewString(table, "rate_ground_sb_spaa_game_time")
	g.TotalDestroyCount = field.NewInt(table, "rate_fleet_sb_total_destroy_count")
	g.FighterGameCount = field.NewInt(table, "rate_aviation_sb_fighter_game_count")
	g.BomberGameCount = field.NewInt(table, "rate_aviation_sb_bomber_game_count")
	g.AttackerGameCount = field.NewInt(table, "rate_aviation_sb_attacker_game_count")
	g.FighterGameTime = field.NewString(table, "rate_aviation_sb_fighter_game_time")
	g.BomberGameTime = field.NewString(table, "rate_aviation_sb_bomber_game_time")
	g.AttackerGameTime = field.NewString(table, "rate_aviation_sb_attacker_game_time")
	g.FleetGameCount = field.NewInt(table, "rate_fleet_sb_fleet_game_count")
	g.TorpedoBoatGameCount = field.NewInt(table, "rate_fleet_sb_torpedo_boat_game_count")
	g.GunboatGameCount = field.NewInt(table, "rate_fleet_sb_gunboat_game_count")
	g.TorpedoGunboatGameCount = field.NewInt(table, "rate_fleet_sb_torpedo_gunboat_game_count")
	g.SubmarineHuntGameCount = field.NewInt(table, "rate_fleet_sb_submarine_hunt_game_count")
	g.DestroyerGameCount = field.NewInt(table, "rate_fleet_sb_destroyer_game_count")
	g.NavyBargeGameCount = field.NewInt(table, "rate_fleet_sb_navy_barge_game_count")
	g.FleetGameTime = field.NewString(table, "rate_fleet_sb_fleet_game_time")
	g.TorpedoBoatGameTime = field.NewString(table, "rate_fleet_sb_torpedo_boat_game_time")
	g.GunboatGameTime = field.NewString(table, "rate_fleet_sb_gunboat_game_time")
	g.TorpedoGunboatGameTime = field.NewString(table, "rate_fleet_sb_torpedo_gunboat_game_time")
	g.SubmarineHuntGameTime = field.NewString(table, "rate_fleet_sb_submarine_hunt_game_time")
	g.DestroyerGameTime = field.NewString(table, "rate_fleet_sb_destroyer_game_time")
	g.NavyBargeGameTime = field.NewString(table, "rate_fleet_sb_navy_barge_game_time")
	g.TsABRate = field.NewFloat64(table, "ts_ab_rate")
	g.TsRBRate = field.NewFloat64(table, "ts_rb_rate")
	g.TsSBRate = field.NewFloat64(table, "ts_sb_rate")
	g.AsABRate = field.NewFloat64(table, "as_ab_rate")
	g.AsRBRate = field.NewFloat64(table, "as_rb_rate")
	g.AsSBRate = field.NewFloat64(table, "as_sb_rate")

	g.fillFieldMap()

	return g
}

func (g *gameUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameUser) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 56)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["nick"] = g.Nick
	g.fieldMap["clan"] = g.Clan
	g.fieldMap["clan_url"] = g.ClanUrl
	g.fieldMap["banned"] = g.Banned
	g.fieldMap["register_date"] = g.RegisterDate
	g.fieldMap["title"] = g.Title
	g.fieldMap["level"] = g.Level
	g.fieldMap["stat_sb_total_mission"] = g.TotalMission
	g.fieldMap["stat_sb_win_rate"] = g.WinRate
	g.fieldMap["rate_fleet_sb_ground_destroy_count"] = g.GroundDestroyCount
	g.fieldMap["rate_fleet_sb_fleet_destroy_count"] = g.FleetDestroyCount
	g.fieldMap["rate_fleet_sb_game_time"] = g.GameTime
	g.fieldMap["rate_fleet_sb_aviation_destroy_count"] = g.AviationDestroyCount
	g.fieldMap["stat_sb_win_count"] = g.WinCount
	g.fieldMap["stat_sb_sliver_eagle_earned"] = g.SliverEagleEarned
	g.fieldMap["stat_sb_dead_count"] = g.DeadCount
	g.fieldMap["rate_fleet_sb_game_count"] = g.GameCount
	g.fieldMap["rate_ground_sb_ground_vehicle_game_count"] = g.GroundVehicleGameCount
	g.fieldMap["rate_ground_sb_td_game_count"] = g.TDGameCount
	g.fieldMap["rate_ground_sb_ht_game_count"] = g.HTGameCount
	g.fieldMap["rate_ground_sb_spaa_game_count"] = g.SPAAGameCount
	g.fieldMap["rate_ground_sb_ground_vehicle_game_time"] = g.GroundVehicleGameTime
	g.fieldMap["rate_ground_sb_td_game_time"] = g.TDGameTime
	g.fieldMap["rate_ground_sb_ht_game_time"] = g.HTGameTime
	g.fieldMap["rate_ground_sb_spaa_game_time"] = g.SPAAGameTime
	g.fieldMap["rate_fleet_sb_total_destroy_count"] = g.TotalDestroyCount
	g.fieldMap["rate_aviation_sb_fighter_game_count"] = g.FighterGameCount
	g.fieldMap["rate_aviation_sb_bomber_game_count"] = g.BomberGameCount
	g.fieldMap["rate_aviation_sb_attacker_game_count"] = g.AttackerGameCount
	g.fieldMap["rate_aviation_sb_fighter_game_time"] = g.FighterGameTime
	g.fieldMap["rate_aviation_sb_bomber_game_time"] = g.BomberGameTime
	g.fieldMap["rate_aviation_sb_attacker_game_time"] = g.AttackerGameTime
	g.fieldMap["rate_fleet_sb_fleet_game_count"] = g.FleetGameCount
	g.fieldMap["rate_fleet_sb_torpedo_boat_game_count"] = g.TorpedoBoatGameCount
	g.fieldMap["rate_fleet_sb_gunboat_game_count"] = g.GunboatGameCount
	g.fieldMap["rate_fleet_sb_torpedo_gunboat_game_count"] = g.TorpedoGunboatGameCount
	g.fieldMap["rate_fleet_sb_submarine_hunt_game_count"] = g.SubmarineHuntGameCount
	g.fieldMap["rate_fleet_sb_destroyer_game_count"] = g.DestroyerGameCount
	g.fieldMap["rate_fleet_sb_navy_barge_game_count"] = g.NavyBargeGameCount
	g.fieldMap["rate_fleet_sb_fleet_game_time"] = g.FleetGameTime
	g.fieldMap["rate_fleet_sb_torpedo_boat_game_time"] = g.TorpedoBoatGameTime
	g.fieldMap["rate_fleet_sb_gunboat_game_time"] = g.GunboatGameTime
	g.fieldMap["rate_fleet_sb_torpedo_gunboat_game_time"] = g.TorpedoGunboatGameTime
	g.fieldMap["rate_fleet_sb_submarine_hunt_game_time"] = g.SubmarineHuntGameTime
	g.fieldMap["rate_fleet_sb_destroyer_game_time"] = g.DestroyerGameTime
	g.fieldMap["rate_fleet_sb_navy_barge_game_time"] = g.NavyBargeGameTime
	g.fieldMap["ts_ab_rate"] = g.TsABRate
	g.fieldMap["ts_rb_rate"] = g.TsRBRate
	g.fieldMap["ts_sb_rate"] = g.TsSBRate
	g.fieldMap["as_ab_rate"] = g.AsABRate
	g.fieldMap["as_rb_rate"] = g.AsRBRate
	g.fieldMap["as_sb_rate"] = g.AsSBRate
}

func (g gameUser) clone(db *gorm.DB) gameUser {
	g.gameUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameUser) replaceDB(db *gorm.DB) gameUser {
	g.gameUserDo.ReplaceDB(db)
	return g
}

type gameUserDo struct{ gen.DO }

type IGameUserDo interface {
	gen.SubQuery
	Debug() IGameUserDo
	WithContext(ctx context.Context) IGameUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameUserDo
	WriteDB() IGameUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameUserDo
	Not(conds ...gen.Condition) IGameUserDo
	Or(conds ...gen.Condition) IGameUserDo
	Select(conds ...field.Expr) IGameUserDo
	Where(conds ...gen.Condition) IGameUserDo
	Order(conds ...field.Expr) IGameUserDo
	Distinct(cols ...field.Expr) IGameUserDo
	Omit(cols ...field.Expr) IGameUserDo
	Join(table schema.Tabler, on ...field.Expr) IGameUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameUserDo
	Group(cols ...field.Expr) IGameUserDo
	Having(conds ...gen.Condition) IGameUserDo
	Limit(limit int) IGameUserDo
	Offset(offset int) IGameUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameUserDo
	Unscoped() IGameUserDo
	Create(values ...*table.GameUser) error
	CreateInBatches(values []*table.GameUser, batchSize int) error
	Save(values ...*table.GameUser) error
	First() (*table.GameUser, error)
	Take() (*table.GameUser, error)
	Last() (*table.GameUser, error)
	Find() ([]*table.GameUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GameUser, err error)
	FindInBatches(result *[]*table.GameUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.GameUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameUserDo
	Assign(attrs ...field.AssignExpr) IGameUserDo
	Joins(fields ...field.RelationField) IGameUserDo
	Preload(fields ...field.RelationField) IGameUserDo
	FirstOrInit() (*table.GameUser, error)
	FirstOrCreate() (*table.GameUser, error)
	FindByPage(offset int, limit int) (result []*table.GameUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameUserDo) Debug() IGameUserDo {
	return g.withDO(g.DO.Debug())
}

func (g gameUserDo) WithContext(ctx context.Context) IGameUserDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameUserDo) ReadDB() IGameUserDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameUserDo) WriteDB() IGameUserDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameUserDo) Session(config *gorm.Session) IGameUserDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameUserDo) Clauses(conds ...clause.Expression) IGameUserDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameUserDo) Returning(value interface{}, columns ...string) IGameUserDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameUserDo) Not(conds ...gen.Condition) IGameUserDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameUserDo) Or(conds ...gen.Condition) IGameUserDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameUserDo) Select(conds ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameUserDo) Where(conds ...gen.Condition) IGameUserDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGameUserDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gameUserDo) Order(conds ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameUserDo) Distinct(cols ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameUserDo) Omit(cols ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameUserDo) Join(table schema.Tabler, on ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameUserDo) Group(cols ...field.Expr) IGameUserDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameUserDo) Having(conds ...gen.Condition) IGameUserDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameUserDo) Limit(limit int) IGameUserDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameUserDo) Offset(offset int) IGameUserDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameUserDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameUserDo) Unscoped() IGameUserDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameUserDo) Create(values ...*table.GameUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameUserDo) CreateInBatches(values []*table.GameUser, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameUserDo) Save(values ...*table.GameUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameUserDo) First() (*table.GameUser, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.GameUser), nil
	}
}

func (g gameUserDo) Take() (*table.GameUser, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.GameUser), nil
	}
}

func (g gameUserDo) Last() (*table.GameUser, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.GameUser), nil
	}
}

func (g gameUserDo) Find() ([]*table.GameUser, error) {
	result, err := g.DO.Find()
	return result.([]*table.GameUser), err
}

func (g gameUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GameUser, err error) {
	buf := make([]*table.GameUser, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameUserDo) FindInBatches(result *[]*table.GameUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameUserDo) Attrs(attrs ...field.AssignExpr) IGameUserDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameUserDo) Assign(attrs ...field.AssignExpr) IGameUserDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameUserDo) Joins(fields ...field.RelationField) IGameUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameUserDo) Preload(fields ...field.RelationField) IGameUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameUserDo) FirstOrInit() (*table.GameUser, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.GameUser), nil
	}
}

func (g gameUserDo) FirstOrCreate() (*table.GameUser, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.GameUser), nil
	}
}

func (g gameUserDo) FindByPage(offset int, limit int) (result []*table.GameUser, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameUserDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameUserDo) Delete(models ...*table.GameUser) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameUserDo) withDO(do gen.Dao) *gameUserDo {
	g.DO = *do.(*gen.DO)
	return g
}
