// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/axiangcoding/antonstar-bot/data/table"
)

func newQQGroupConfig(db *gorm.DB, opts ...gen.DOOption) qQGroupConfig {
	_qQGroupConfig := qQGroupConfig{}

	_qQGroupConfig.qQGroupConfigDo.UseDB(db, opts...)
	_qQGroupConfig.qQGroupConfigDo.UseModel(&table.QQGroupConfig{})

	tableName := _qQGroupConfig.qQGroupConfigDo.TableName()
	_qQGroupConfig.ALL = field.NewAsterisk(tableName)
	_qQGroupConfig.ID = field.NewUint(tableName, "id")
	_qQGroupConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_qQGroupConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_qQGroupConfig.DeletedAt = field.NewField(tableName, "deleted_at")
	_qQGroupConfig.GroupId = field.NewInt64(tableName, "group_id")
	_qQGroupConfig.BindBiliRoomId = field.NewInt64(tableName, "bind_bili_room_id")
	_qQGroupConfig.Banned = field.NewBool(tableName, "banned")
	_qQGroupConfig.AllowAdminConfig = field.NewBool(tableName, "allow_admin_config")
	_qQGroupConfig.Shutdown = field.NewBool(tableName, "shutdown")
	_qQGroupConfig.EnableActionQuery = field.NewBool(tableName, "enable_action_query")
	_qQGroupConfig.EnableActionLuck = field.NewBool(tableName, "enable_action_luck")
	_qQGroupConfig.EnableActionSetting = field.NewBool(tableName, "enable_action_setting")
	_qQGroupConfig.EnableCheckBiliRoom = field.NewBool(tableName, "enable_check_bili_room")
	_qQGroupConfig.MessageTemplate = field.NewInt(tableName, "message_template")
	_qQGroupConfig.TodayQueryCount = field.NewInt(tableName, "today_query_count")
	_qQGroupConfig.OneDayQueryLimit = field.NewInt(tableName, "one_day_query_limit")
	_qQGroupConfig.TotalQueryCount = field.NewInt(tableName, "total_query_count")
	_qQGroupConfig.TodayUsageCount = field.NewInt(tableName, "today_usage_count")
	_qQGroupConfig.OneDayUsageLimit = field.NewInt(tableName, "one_day_usage_limit")
	_qQGroupConfig.TotalUsageCount = field.NewInt(tableName, "total_usage_count")

	_qQGroupConfig.fillFieldMap()

	return _qQGroupConfig
}

type qQGroupConfig struct {
	qQGroupConfigDo

	ALL                 field.Asterisk
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	GroupId             field.Int64
	BindBiliRoomId      field.Int64
	Banned              field.Bool
	AllowAdminConfig    field.Bool
	Shutdown            field.Bool
	EnableActionQuery   field.Bool
	EnableActionLuck    field.Bool
	EnableActionSetting field.Bool
	EnableCheckBiliRoom field.Bool
	MessageTemplate     field.Int
	TodayQueryCount     field.Int
	OneDayQueryLimit    field.Int
	TotalQueryCount     field.Int
	TodayUsageCount     field.Int
	OneDayUsageLimit    field.Int
	TotalUsageCount     field.Int

	fieldMap map[string]field.Expr
}

func (q qQGroupConfig) Table(newTableName string) *qQGroupConfig {
	q.qQGroupConfigDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qQGroupConfig) As(alias string) *qQGroupConfig {
	q.qQGroupConfigDo.DO = *(q.qQGroupConfigDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qQGroupConfig) updateTableName(table string) *qQGroupConfig {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewUint(table, "id")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.GroupId = field.NewInt64(table, "group_id")
	q.BindBiliRoomId = field.NewInt64(table, "bind_bili_room_id")
	q.Banned = field.NewBool(table, "banned")
	q.AllowAdminConfig = field.NewBool(table, "allow_admin_config")
	q.Shutdown = field.NewBool(table, "shutdown")
	q.EnableActionQuery = field.NewBool(table, "enable_action_query")
	q.EnableActionLuck = field.NewBool(table, "enable_action_luck")
	q.EnableActionSetting = field.NewBool(table, "enable_action_setting")
	q.EnableCheckBiliRoom = field.NewBool(table, "enable_check_bili_room")
	q.MessageTemplate = field.NewInt(table, "message_template")
	q.TodayQueryCount = field.NewInt(table, "today_query_count")
	q.OneDayQueryLimit = field.NewInt(table, "one_day_query_limit")
	q.TotalQueryCount = field.NewInt(table, "total_query_count")
	q.TodayUsageCount = field.NewInt(table, "today_usage_count")
	q.OneDayUsageLimit = field.NewInt(table, "one_day_usage_limit")
	q.TotalUsageCount = field.NewInt(table, "total_usage_count")

	q.fillFieldMap()

	return q
}

func (q *qQGroupConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qQGroupConfig) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 20)
	q.fieldMap["id"] = q.ID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["group_id"] = q.GroupId
	q.fieldMap["bind_bili_room_id"] = q.BindBiliRoomId
	q.fieldMap["banned"] = q.Banned
	q.fieldMap["allow_admin_config"] = q.AllowAdminConfig
	q.fieldMap["shutdown"] = q.Shutdown
	q.fieldMap["enable_action_query"] = q.EnableActionQuery
	q.fieldMap["enable_action_luck"] = q.EnableActionLuck
	q.fieldMap["enable_action_setting"] = q.EnableActionSetting
	q.fieldMap["enable_check_bili_room"] = q.EnableCheckBiliRoom
	q.fieldMap["message_template"] = q.MessageTemplate
	q.fieldMap["today_query_count"] = q.TodayQueryCount
	q.fieldMap["one_day_query_limit"] = q.OneDayQueryLimit
	q.fieldMap["total_query_count"] = q.TotalQueryCount
	q.fieldMap["today_usage_count"] = q.TodayUsageCount
	q.fieldMap["one_day_usage_limit"] = q.OneDayUsageLimit
	q.fieldMap["total_usage_count"] = q.TotalUsageCount
}

func (q qQGroupConfig) clone(db *gorm.DB) qQGroupConfig {
	q.qQGroupConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qQGroupConfig) replaceDB(db *gorm.DB) qQGroupConfig {
	q.qQGroupConfigDo.ReplaceDB(db)
	return q
}

type qQGroupConfigDo struct{ gen.DO }

type IQQGroupConfigDo interface {
	gen.SubQuery
	Debug() IQQGroupConfigDo
	WithContext(ctx context.Context) IQQGroupConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQQGroupConfigDo
	WriteDB() IQQGroupConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQQGroupConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQQGroupConfigDo
	Not(conds ...gen.Condition) IQQGroupConfigDo
	Or(conds ...gen.Condition) IQQGroupConfigDo
	Select(conds ...field.Expr) IQQGroupConfigDo
	Where(conds ...gen.Condition) IQQGroupConfigDo
	Order(conds ...field.Expr) IQQGroupConfigDo
	Distinct(cols ...field.Expr) IQQGroupConfigDo
	Omit(cols ...field.Expr) IQQGroupConfigDo
	Join(table schema.Tabler, on ...field.Expr) IQQGroupConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQQGroupConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQQGroupConfigDo
	Group(cols ...field.Expr) IQQGroupConfigDo
	Having(conds ...gen.Condition) IQQGroupConfigDo
	Limit(limit int) IQQGroupConfigDo
	Offset(offset int) IQQGroupConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQQGroupConfigDo
	Unscoped() IQQGroupConfigDo
	Create(values ...*table.QQGroupConfig) error
	CreateInBatches(values []*table.QQGroupConfig, batchSize int) error
	Save(values ...*table.QQGroupConfig) error
	First() (*table.QQGroupConfig, error)
	Take() (*table.QQGroupConfig, error)
	Last() (*table.QQGroupConfig, error)
	Find() ([]*table.QQGroupConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.QQGroupConfig, err error)
	FindInBatches(result *[]*table.QQGroupConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.QQGroupConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQQGroupConfigDo
	Assign(attrs ...field.AssignExpr) IQQGroupConfigDo
	Joins(fields ...field.RelationField) IQQGroupConfigDo
	Preload(fields ...field.RelationField) IQQGroupConfigDo
	FirstOrInit() (*table.QQGroupConfig, error)
	FirstOrCreate() (*table.QQGroupConfig, error)
	FindByPage(offset int, limit int) (result []*table.QQGroupConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQQGroupConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qQGroupConfigDo) Debug() IQQGroupConfigDo {
	return q.withDO(q.DO.Debug())
}

func (q qQGroupConfigDo) WithContext(ctx context.Context) IQQGroupConfigDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qQGroupConfigDo) ReadDB() IQQGroupConfigDo {
	return q.Clauses(dbresolver.Read)
}

func (q qQGroupConfigDo) WriteDB() IQQGroupConfigDo {
	return q.Clauses(dbresolver.Write)
}

func (q qQGroupConfigDo) Session(config *gorm.Session) IQQGroupConfigDo {
	return q.withDO(q.DO.Session(config))
}

func (q qQGroupConfigDo) Clauses(conds ...clause.Expression) IQQGroupConfigDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qQGroupConfigDo) Returning(value interface{}, columns ...string) IQQGroupConfigDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qQGroupConfigDo) Not(conds ...gen.Condition) IQQGroupConfigDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qQGroupConfigDo) Or(conds ...gen.Condition) IQQGroupConfigDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qQGroupConfigDo) Select(conds ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qQGroupConfigDo) Where(conds ...gen.Condition) IQQGroupConfigDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qQGroupConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQQGroupConfigDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q qQGroupConfigDo) Order(conds ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qQGroupConfigDo) Distinct(cols ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qQGroupConfigDo) Omit(cols ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qQGroupConfigDo) Join(table schema.Tabler, on ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qQGroupConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qQGroupConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qQGroupConfigDo) Group(cols ...field.Expr) IQQGroupConfigDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qQGroupConfigDo) Having(conds ...gen.Condition) IQQGroupConfigDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qQGroupConfigDo) Limit(limit int) IQQGroupConfigDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qQGroupConfigDo) Offset(offset int) IQQGroupConfigDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qQGroupConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQQGroupConfigDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qQGroupConfigDo) Unscoped() IQQGroupConfigDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qQGroupConfigDo) Create(values ...*table.QQGroupConfig) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qQGroupConfigDo) CreateInBatches(values []*table.QQGroupConfig, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qQGroupConfigDo) Save(values ...*table.QQGroupConfig) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qQGroupConfigDo) First() (*table.QQGroupConfig, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.QQGroupConfig), nil
	}
}

func (q qQGroupConfigDo) Take() (*table.QQGroupConfig, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.QQGroupConfig), nil
	}
}

func (q qQGroupConfigDo) Last() (*table.QQGroupConfig, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.QQGroupConfig), nil
	}
}

func (q qQGroupConfigDo) Find() ([]*table.QQGroupConfig, error) {
	result, err := q.DO.Find()
	return result.([]*table.QQGroupConfig), err
}

func (q qQGroupConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.QQGroupConfig, err error) {
	buf := make([]*table.QQGroupConfig, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qQGroupConfigDo) FindInBatches(result *[]*table.QQGroupConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qQGroupConfigDo) Attrs(attrs ...field.AssignExpr) IQQGroupConfigDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qQGroupConfigDo) Assign(attrs ...field.AssignExpr) IQQGroupConfigDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qQGroupConfigDo) Joins(fields ...field.RelationField) IQQGroupConfigDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qQGroupConfigDo) Preload(fields ...field.RelationField) IQQGroupConfigDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qQGroupConfigDo) FirstOrInit() (*table.QQGroupConfig, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.QQGroupConfig), nil
	}
}

func (q qQGroupConfigDo) FirstOrCreate() (*table.QQGroupConfig, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.QQGroupConfig), nil
	}
}

func (q qQGroupConfigDo) FindByPage(offset int, limit int) (result []*table.QQGroupConfig, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qQGroupConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qQGroupConfigDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qQGroupConfigDo) Delete(models ...*table.QQGroupConfig) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qQGroupConfigDo) withDO(do gen.Dao) *qQGroupConfigDo {
	q.DO = *do.(*gen.DO)
	return q
}
