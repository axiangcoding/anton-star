// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/axiangcoding/antonstar-bot/data/table"
)

func newGlobalConfig(db *gorm.DB, opts ...gen.DOOption) globalConfig {
	_globalConfig := globalConfig{}

	_globalConfig.globalConfigDo.UseDB(db, opts...)
	_globalConfig.globalConfigDo.UseModel(&table.GlobalConfig{})

	tableName := _globalConfig.globalConfigDo.TableName()
	_globalConfig.ALL = field.NewAsterisk(tableName)
	_globalConfig.ID = field.NewUint(tableName, "id")
	_globalConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_globalConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_globalConfig.DeletedAt = field.NewField(tableName, "deleted_at")
	_globalConfig.Key = field.NewString(tableName, "key")
	_globalConfig.Value = field.NewString(tableName, "value")

	_globalConfig.fillFieldMap()

	return _globalConfig
}

type globalConfig struct {
	globalConfigDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Key       field.String
	Value     field.String

	fieldMap map[string]field.Expr
}

func (g globalConfig) Table(newTableName string) *globalConfig {
	g.globalConfigDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalConfig) As(alias string) *globalConfig {
	g.globalConfigDo.DO = *(g.globalConfigDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalConfig) updateTableName(table string) *globalConfig {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.Key = field.NewString(table, "key")
	g.Value = field.NewString(table, "value")

	g.fillFieldMap()

	return g
}

func (g *globalConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalConfig) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["key"] = g.Key
	g.fieldMap["value"] = g.Value
}

func (g globalConfig) clone(db *gorm.DB) globalConfig {
	g.globalConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g globalConfig) replaceDB(db *gorm.DB) globalConfig {
	g.globalConfigDo.ReplaceDB(db)
	return g
}

type globalConfigDo struct{ gen.DO }

type IGlobalConfigDo interface {
	gen.SubQuery
	Debug() IGlobalConfigDo
	WithContext(ctx context.Context) IGlobalConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlobalConfigDo
	WriteDB() IGlobalConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlobalConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalConfigDo
	Not(conds ...gen.Condition) IGlobalConfigDo
	Or(conds ...gen.Condition) IGlobalConfigDo
	Select(conds ...field.Expr) IGlobalConfigDo
	Where(conds ...gen.Condition) IGlobalConfigDo
	Order(conds ...field.Expr) IGlobalConfigDo
	Distinct(cols ...field.Expr) IGlobalConfigDo
	Omit(cols ...field.Expr) IGlobalConfigDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfigDo
	Group(cols ...field.Expr) IGlobalConfigDo
	Having(conds ...gen.Condition) IGlobalConfigDo
	Limit(limit int) IGlobalConfigDo
	Offset(offset int) IGlobalConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfigDo
	Unscoped() IGlobalConfigDo
	Create(values ...*table.GlobalConfig) error
	CreateInBatches(values []*table.GlobalConfig, batchSize int) error
	Save(values ...*table.GlobalConfig) error
	First() (*table.GlobalConfig, error)
	Take() (*table.GlobalConfig, error)
	Last() (*table.GlobalConfig, error)
	Find() ([]*table.GlobalConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GlobalConfig, err error)
	FindInBatches(result *[]*table.GlobalConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.GlobalConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalConfigDo
	Assign(attrs ...field.AssignExpr) IGlobalConfigDo
	Joins(fields ...field.RelationField) IGlobalConfigDo
	Preload(fields ...field.RelationField) IGlobalConfigDo
	FirstOrInit() (*table.GlobalConfig, error)
	FirstOrCreate() (*table.GlobalConfig, error)
	FindByPage(offset int, limit int) (result []*table.GlobalConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalConfigDo) Debug() IGlobalConfigDo {
	return g.withDO(g.DO.Debug())
}

func (g globalConfigDo) WithContext(ctx context.Context) IGlobalConfigDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalConfigDo) ReadDB() IGlobalConfigDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalConfigDo) WriteDB() IGlobalConfigDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalConfigDo) Session(config *gorm.Session) IGlobalConfigDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalConfigDo) Clauses(conds ...clause.Expression) IGlobalConfigDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalConfigDo) Returning(value interface{}, columns ...string) IGlobalConfigDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalConfigDo) Not(conds ...gen.Condition) IGlobalConfigDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalConfigDo) Or(conds ...gen.Condition) IGlobalConfigDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalConfigDo) Select(conds ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalConfigDo) Where(conds ...gen.Condition) IGlobalConfigDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalConfigDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalConfigDo) Order(conds ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalConfigDo) Distinct(cols ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalConfigDo) Omit(cols ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalConfigDo) Join(table schema.Tabler, on ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalConfigDo) Group(cols ...field.Expr) IGlobalConfigDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalConfigDo) Having(conds ...gen.Condition) IGlobalConfigDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalConfigDo) Limit(limit int) IGlobalConfigDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalConfigDo) Offset(offset int) IGlobalConfigDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfigDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalConfigDo) Unscoped() IGlobalConfigDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalConfigDo) Create(values ...*table.GlobalConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalConfigDo) CreateInBatches(values []*table.GlobalConfig, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalConfigDo) Save(values ...*table.GlobalConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalConfigDo) First() (*table.GlobalConfig, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.GlobalConfig), nil
	}
}

func (g globalConfigDo) Take() (*table.GlobalConfig, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.GlobalConfig), nil
	}
}

func (g globalConfigDo) Last() (*table.GlobalConfig, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.GlobalConfig), nil
	}
}

func (g globalConfigDo) Find() ([]*table.GlobalConfig, error) {
	result, err := g.DO.Find()
	return result.([]*table.GlobalConfig), err
}

func (g globalConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GlobalConfig, err error) {
	buf := make([]*table.GlobalConfig, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalConfigDo) FindInBatches(result *[]*table.GlobalConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalConfigDo) Attrs(attrs ...field.AssignExpr) IGlobalConfigDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalConfigDo) Assign(attrs ...field.AssignExpr) IGlobalConfigDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalConfigDo) Joins(fields ...field.RelationField) IGlobalConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalConfigDo) Preload(fields ...field.RelationField) IGlobalConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalConfigDo) FirstOrInit() (*table.GlobalConfig, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.GlobalConfig), nil
	}
}

func (g globalConfigDo) FirstOrCreate() (*table.GlobalConfig, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.GlobalConfig), nil
	}
}

func (g globalConfigDo) FindByPage(offset int, limit int) (result []*table.GlobalConfig, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalConfigDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalConfigDo) Delete(models ...*table.GlobalConfig) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalConfigDo) withDO(do gen.Dao) *globalConfigDo {
	g.DO = *do.(*gen.DO)
	return g
}
