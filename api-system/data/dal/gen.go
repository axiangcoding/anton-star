// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	GameUser      *gameUser
	GlobalConfig  *globalConfig
	Mission       *mission
	QQGroupConfig *qQGroupConfig
	QQUserConfig  *qQUserConfig
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	GameUser = &Q.GameUser
	GlobalConfig = &Q.GlobalConfig
	Mission = &Q.Mission
	QQGroupConfig = &Q.QQGroupConfig
	QQUserConfig = &Q.QQUserConfig
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		GameUser:      newGameUser(db, opts...),
		GlobalConfig:  newGlobalConfig(db, opts...),
		Mission:       newMission(db, opts...),
		QQGroupConfig: newQQGroupConfig(db, opts...),
		QQUserConfig:  newQQUserConfig(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	GameUser      gameUser
	GlobalConfig  globalConfig
	Mission       mission
	QQGroupConfig qQGroupConfig
	QQUserConfig  qQUserConfig
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		GameUser:      q.GameUser.clone(db),
		GlobalConfig:  q.GlobalConfig.clone(db),
		Mission:       q.Mission.clone(db),
		QQGroupConfig: q.QQGroupConfig.clone(db),
		QQUserConfig:  q.QQUserConfig.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		GameUser:      q.GameUser.replaceDB(db),
		GlobalConfig:  q.GlobalConfig.replaceDB(db),
		Mission:       q.Mission.replaceDB(db),
		QQGroupConfig: q.QQGroupConfig.replaceDB(db),
		QQUserConfig:  q.QQUserConfig.replaceDB(db),
	}
}

type queryCtx struct {
	GameUser      IGameUserDo
	GlobalConfig  IGlobalConfigDo
	Mission       IMissionDo
	QQGroupConfig IQQGroupConfigDo
	QQUserConfig  IQQUserConfigDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		GameUser:      q.GameUser.WithContext(ctx),
		GlobalConfig:  q.GlobalConfig.WithContext(ctx),
		Mission:       q.Mission.WithContext(ctx),
		QQGroupConfig: q.QQGroupConfig.WithContext(ctx),
		QQUserConfig:  q.QQUserConfig.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
