// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/axiangcoding/ax-web/data/table"
)

func newMission(db *gorm.DB, opts ...gen.DOOption) mission {
	_mission := mission{}

	_mission.missionDo.UseDB(db, opts...)
	_mission.missionDo.UseModel(&table.Mission{})

	tableName := _mission.missionDo.TableName()
	_mission.ALL = field.NewAsterisk(tableName)
	_mission.ID = field.NewUint(tableName, "id")
	_mission.CreatedAt = field.NewTime(tableName, "created_at")
	_mission.UpdatedAt = field.NewTime(tableName, "updated_at")
	_mission.DeletedAt = field.NewField(tableName, "deleted_at")
	_mission.MissionId = field.NewString(tableName, "mission_id")
	_mission.Type = field.NewString(tableName, "type")
	_mission.Status = field.NewString(tableName, "status")
	_mission.FinishedTime = field.NewTime(tableName, "finished_time")
	_mission.Process = field.NewFloat64(tableName, "process")
	_mission.Detail = field.NewString(tableName, "detail")
	_mission.Result = field.NewString(tableName, "result")

	_mission.fillFieldMap()

	return _mission
}

type mission struct {
	missionDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	MissionId    field.String
	Type         field.String
	Status       field.String
	FinishedTime field.Time
	Process      field.Float64
	Detail       field.String
	Result       field.String

	fieldMap map[string]field.Expr
}

func (m mission) Table(newTableName string) *mission {
	m.missionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mission) As(alias string) *mission {
	m.missionDo.DO = *(m.missionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mission) updateTableName(table string) *mission {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.MissionId = field.NewString(table, "mission_id")
	m.Type = field.NewString(table, "type")
	m.Status = field.NewString(table, "status")
	m.FinishedTime = field.NewTime(table, "finished_time")
	m.Process = field.NewFloat64(table, "process")
	m.Detail = field.NewString(table, "detail")
	m.Result = field.NewString(table, "result")

	m.fillFieldMap()

	return m
}

func (m *mission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mission) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["mission_id"] = m.MissionId
	m.fieldMap["type"] = m.Type
	m.fieldMap["status"] = m.Status
	m.fieldMap["finished_time"] = m.FinishedTime
	m.fieldMap["process"] = m.Process
	m.fieldMap["detail"] = m.Detail
	m.fieldMap["result"] = m.Result
}

func (m mission) clone(db *gorm.DB) mission {
	m.missionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mission) replaceDB(db *gorm.DB) mission {
	m.missionDo.ReplaceDB(db)
	return m
}

type missionDo struct{ gen.DO }

type IMissionDo interface {
	gen.SubQuery
	Debug() IMissionDo
	WithContext(ctx context.Context) IMissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMissionDo
	WriteDB() IMissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMissionDo
	Not(conds ...gen.Condition) IMissionDo
	Or(conds ...gen.Condition) IMissionDo
	Select(conds ...field.Expr) IMissionDo
	Where(conds ...gen.Condition) IMissionDo
	Order(conds ...field.Expr) IMissionDo
	Distinct(cols ...field.Expr) IMissionDo
	Omit(cols ...field.Expr) IMissionDo
	Join(table schema.Tabler, on ...field.Expr) IMissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMissionDo
	Group(cols ...field.Expr) IMissionDo
	Having(conds ...gen.Condition) IMissionDo
	Limit(limit int) IMissionDo
	Offset(offset int) IMissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMissionDo
	Unscoped() IMissionDo
	Create(values ...*table.Mission) error
	CreateInBatches(values []*table.Mission, batchSize int) error
	Save(values ...*table.Mission) error
	First() (*table.Mission, error)
	Take() (*table.Mission, error)
	Last() (*table.Mission, error)
	Find() ([]*table.Mission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Mission, err error)
	FindInBatches(result *[]*table.Mission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.Mission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMissionDo
	Assign(attrs ...field.AssignExpr) IMissionDo
	Joins(fields ...field.RelationField) IMissionDo
	Preload(fields ...field.RelationField) IMissionDo
	FirstOrInit() (*table.Mission, error)
	FirstOrCreate() (*table.Mission, error)
	FindByPage(offset int, limit int) (result []*table.Mission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m missionDo) Debug() IMissionDo {
	return m.withDO(m.DO.Debug())
}

func (m missionDo) WithContext(ctx context.Context) IMissionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m missionDo) ReadDB() IMissionDo {
	return m.Clauses(dbresolver.Read)
}

func (m missionDo) WriteDB() IMissionDo {
	return m.Clauses(dbresolver.Write)
}

func (m missionDo) Session(config *gorm.Session) IMissionDo {
	return m.withDO(m.DO.Session(config))
}

func (m missionDo) Clauses(conds ...clause.Expression) IMissionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m missionDo) Returning(value interface{}, columns ...string) IMissionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m missionDo) Not(conds ...gen.Condition) IMissionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m missionDo) Or(conds ...gen.Condition) IMissionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m missionDo) Select(conds ...field.Expr) IMissionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m missionDo) Where(conds ...gen.Condition) IMissionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m missionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMissionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m missionDo) Order(conds ...field.Expr) IMissionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m missionDo) Distinct(cols ...field.Expr) IMissionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m missionDo) Omit(cols ...field.Expr) IMissionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m missionDo) Join(table schema.Tabler, on ...field.Expr) IMissionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m missionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMissionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m missionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMissionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m missionDo) Group(cols ...field.Expr) IMissionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m missionDo) Having(conds ...gen.Condition) IMissionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m missionDo) Limit(limit int) IMissionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m missionDo) Offset(offset int) IMissionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m missionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMissionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m missionDo) Unscoped() IMissionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m missionDo) Create(values ...*table.Mission) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m missionDo) CreateInBatches(values []*table.Mission, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m missionDo) Save(values ...*table.Mission) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m missionDo) First() (*table.Mission, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.Mission), nil
	}
}

func (m missionDo) Take() (*table.Mission, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.Mission), nil
	}
}

func (m missionDo) Last() (*table.Mission, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.Mission), nil
	}
}

func (m missionDo) Find() ([]*table.Mission, error) {
	result, err := m.DO.Find()
	return result.([]*table.Mission), err
}

func (m missionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Mission, err error) {
	buf := make([]*table.Mission, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m missionDo) FindInBatches(result *[]*table.Mission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m missionDo) Attrs(attrs ...field.AssignExpr) IMissionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m missionDo) Assign(attrs ...field.AssignExpr) IMissionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m missionDo) Joins(fields ...field.RelationField) IMissionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m missionDo) Preload(fields ...field.RelationField) IMissionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m missionDo) FirstOrInit() (*table.Mission, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.Mission), nil
	}
}

func (m missionDo) FirstOrCreate() (*table.Mission, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.Mission), nil
	}
}

func (m missionDo) FindByPage(offset int, limit int) (result []*table.Mission, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m missionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m missionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m missionDo) Delete(models ...*table.Mission) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *missionDo) withDO(do gen.Dao) *missionDo {
	m.DO = *do.(*gen.DO)
	return m
}
